import xarray as xr
import matplotlib.pyplot as plt
import numpy as np
from plot_europe import plot_europe
from tools import change_to_datetime

folder = '../data/miroc6/to_use/winter'
f_tasmax = folder+'/tasmax_MIROC6_1980-2010_europe_winter_celc.nc'
f_tas = folder+'/tas_MIROC6_1980-2010_europe_winter_celc.nc'
f_hum = folder+'/humidity_MIROC6_1980-2010_europe_winter.nc'
f_sfcWind = folder+'/sfcWind_MIROC6_1980-2010_europe_winter.nc'


# Load Datasets

ds_tasmax = xr.open_dataset(f_tasmax)
ds_relhum = xr.open_dataset(f_hum)
ds_wind = xr.open_dataset(f_sfcWind)
ds_tas = xr.open_dataset(f_tas)


# Winter comfort calculations START----------------------------------------------------------------------------------------
maxtemp_conf = np.where(ds_tasmax.tasmax < 31, 3, -2)
temp_comfort = np.where(ds_tas.tas < 27, 2, 0)

wds1 = ds_tasmax.assign(maxtemp_comfort=xr.where(ds_tasmax.tasmax < 31, 3, -2))

wds2 = wds1.assign(temp_comfort=xr.where(ds_tas.tas < 27, 2, 0))

wds3 = wds2.assign(heatindex_comfort=xr.where((ds_relhum.hurs < 60) & (ds_tasmax.tasmax < 27), 2, -1))

wds4 = wds3.assign(hum_comfort=xr.where(ds_relhum.hurs < 65, 2, 0))

wds5 = wds4.assign(hum_comfort=xr.where((ds_relhum.hurs > 65) & (ds_tas.tas > 27), wds4.hum_comfort-2, wds4.hum_comfort))

wds6 = wds5.assign(wind_comfort=xr.where((ds_wind.sfcWind < 4), 1, 0))

wds7 = wds6.assign(wind_comfort=xr.where(((ds_wind.sfcWind == 0) & (ds_tasmax.tasmax > 25)), wds6.wind_comfort - 2, wds6.wind_comfort))

wds8 = wds7.assign(total_comfort = 10*(wds1.maxtemp_comfort + wds2.temp_comfort + wds3.heatindex_comfort + wds5.hum_comfort + wds6.wind_comfort))
     
wds8 = wds8.drop(['tasmax',
'maxtemp_comfort',
'temp_comfort',
'heatindex_comfort',
'hum_comfort',
'wind_comfort',])          
# vars_to_assign = {'maxtemp_comfort':maxtemp_comfort,
#                   'temp_comfort':temp_comfort,
#                   'heatindex_comfort':hum_comfort,
#                   'wind_comfort':wind_comfort,
#                   'hum_comfort':hum_comfort,
#                   'total_comfort':total_comfort}

# ds_indexes = ds_indexes.assign(vars_to_assign)
# Winter comfort calculations END----------------------------------------------------------------------------------------

# change_to_datetime(ds8)

# plot_europe(ds8, "total_comfort", 'total_comfort', '2000-08-01', 12)

ds8.to_netcdf('../data//miroc6/output/comfort_index_2020-2050_winter.nc')
